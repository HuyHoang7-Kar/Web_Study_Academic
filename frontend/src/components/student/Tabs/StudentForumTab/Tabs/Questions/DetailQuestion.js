import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import StudentForumLayout from "../../Layout";
import { getToken } from '../../../../../auth/authHelper';

function StudentForumQuestionDetail() {
  const { id } = useParams();
  const [question, setQuestion] = useState(null);
  const [votes, setVotes] = useState(0); // L∆∞u tr·ªØ vote c·ªßa c√¢u h·ªèi
  const [votes_ans, setVotes_ans] = useState(0); // L∆∞u tr·ªØ vote c·ªßa c√¢u tr·∫£ l·ªùi
  const [answers, setAnswers] = useState([]);
  const [userVoteQuestion, setUserVoteQuestion] = useState(null); // L∆∞u tr·∫°ng th√°i vote c·ªßa user cho c√¢u h·ªèi
  const [userVoteAnswer, setUserVoteAnswer] = useState(null); // L∆∞u tr·∫°ng th√°i vote c·ªßa user cho c√¢u tr·∫£ l·ªùi

  useEffect(() => {
    // L·∫•y c√¢u h·ªèi
    fetch(`http://localhost:8000/api/student/student_forum/student_question/student_showquestion/`)
      .then((res) => res.json())
      .then((data) => {
        const selectedQuestion = data.find((q) => q.id.toString() === id);
        if (selectedQuestion) {
          setQuestion(selectedQuestion);
          setUserVoteQuestion(selectedQuestion.user_vote);
        }
      });

    // L·∫•y c√¢u tr·∫£ l·ªùi
    fetch(`http://localhost:8000/api/student/student_forum/student_question/${id}/answers/`)
      .then((res) => res.json())
      .then((data) => {
        setAnswers(data);
        if (data.length > 0) {
          setUserVoteAnswer(data[0].user_vote);
        }
      });

    // L·∫•y s·ªë l∆∞·ª£ng votes c·ªßa c√¢u h·ªèi
    fetch(`http://localhost:8000/api/student/student_forum/student_question/student_detailquestion/${id}/`)
      .then((res) => res.json())
      .then((data) => {
        if (data.total_vote_score !== undefined) {
          setVotes(data.total_vote_score); // C·∫≠p nh·∫≠t t·ªïng s·ªë vote hi·ªán t·∫°i
        }
      });
  }, [id]);

  if (!question) return <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>;

  const handleVote = (type, action) => {
    let updatedVotes = 0;
  
    // Ki·ªÉm tra n·∫øu ƒë√£ vote l√™n ho·∫∑c vote xu·ªëng r·ªìi th√¨ c·∫≠p nh·∫≠t l·∫°i
    if (type === "question") {
      if (action === "up" && userVoteQuestion !== 1) {
        // N·∫øu ch∆∞a vote l√™n th√¨ tƒÉng l√™n
        if (userVoteQuestion === -1) {
          // N·∫øu tr∆∞·ªõc ƒë√≥ vote xu·ªëng, th√¨ ph·∫£i quay l·∫°i m·ª©c n tr∆∞·ªõc r·ªìi m·ªõi tƒÉng l√™n n + 1
          updatedVotes = votes + 1; // Gi·∫£m xu·ªëng n r·ªìi tƒÉng l√™n n + 1
          setVotes(updatedVotes);
          setUserVoteQuestion(0); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i v·ªÅ ch∆∞a vote (n)
        } else {
          updatedVotes = votes + (userVoteQuestion === 2 ? 2 : 1); // N·∫øu ch∆∞a vote th√¨ c·ªông 1, n·∫øu ƒë√£ vote l√™n 2 l·∫ßn th√¨ c·ªông 2
          setVotes(updatedVotes);
          setUserVoteQuestion(1); // L∆∞u tr·∫°ng th√°i vote c·ªßa ng∆∞·ªùi d√πng
        }
      } else if (action === "down" && userVoteQuestion !== -1) {
        // N·∫øu ch∆∞a gi·∫£m xu·ªëng 1 l·∫ßn, gi·∫£m xu·ªëng tr∆∞·ªõc r·ªìi m·ªõi gi·∫£m xu·ªëng n - 1
        if (userVoteQuestion === 1) {
          updatedVotes = votes - 1; // Gi·∫£m xu·ªëng m·ª©c n tr∆∞·ªõc khi gi·∫£m ti·∫øp
          setVotes(updatedVotes); // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c khi gi·∫£m xu·ªëng n
          setUserVoteQuestion(0); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i vote v·ªÅ 0 (ch∆∞a vote)
        } else if (userVoteQuestion === 0) {
          updatedVotes = votes - 1; // Gi·∫£m m·ªôt l·∫ßn n·ªØa
          setVotes(updatedVotes);
          setUserVoteQuestion(-1); // L∆∞u tr·∫°ng th√°i vote l√† "down"
        }
      }
    } else if (type === "answer") {
      if (action === "up" && userVoteAnswer !== 1) {
        // N·∫øu ch∆∞a vote l√™n th√¨ tƒÉng l√™n
        if (userVoteAnswer === -1) {
          // N·∫øu tr∆∞·ªõc ƒë√≥ vote xu·ªëng, th√¨ ph·∫£i quay l·∫°i m·ª©c n tr∆∞·ªõc r·ªìi m·ªõi tƒÉng l√™n n + 1
          updatedVotes = votes_ans + 1; // Gi·∫£m xu·ªëng n r·ªìi tƒÉng l√™n n + 1
          setVotes_ans(updatedVotes);
          setUserVoteAnswer(0); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i v·ªÅ ch∆∞a vote (n)
        } else {
          updatedVotes = votes_ans + (userVoteAnswer === 2 ? 2 : 1); // N·∫øu ch∆∞a vote th√¨ c·ªông 1, n·∫øu ƒë√£ vote l√™n 2 l·∫ßn th√¨ c·ªông 2
          setVotes_ans(updatedVotes);
          setUserVoteAnswer(1); // L∆∞u tr·∫°ng th√°i vote c·ªßa ng∆∞·ªùi d√πng
        }
      } else if (action === "down" && userVoteAnswer !== -1) {
        // N·∫øu ch∆∞a gi·∫£m xu·ªëng 1 l·∫ßn, gi·∫£m xu·ªëng tr∆∞·ªõc r·ªìi m·ªõi gi·∫£m xu·ªëng n - 1
        if (userVoteAnswer === 1) {
          updatedVotes = votes_ans - 1; // Gi·∫£m xu·ªëng m·ª©c n tr∆∞·ªõc khi gi·∫£m ti·∫øp
          setVotes_ans(updatedVotes); // C·∫≠p nh·∫≠t ngay l·∫≠p t·ª©c khi gi·∫£m xu·ªëng n
          setUserVoteAnswer(0); // ƒê·∫∑t l·∫°i tr·∫°ng th√°i vote v·ªÅ 0 (ch∆∞a vote)
        } else if (userVoteAnswer === 0) {
          updatedVotes = votes_ans - 1; // Gi·∫£m m·ªôt l·∫ßn n·ªØa
          setVotes_ans(updatedVotes);
          setUserVoteAnswer(-1); // L∆∞u tr·∫°ng th√°i vote l√† "down"
        }
      }
    }
  
    const voteType = action === "up" ? "like" : "dislike";
    const contentType = type === "question" ? "question" : "answer";
    const contentId = type === "question" ? question.id : answers[0]?.id;
  
    const voteData = {
      vote_type: voteType,
      vote_for: contentType,
      content_id: contentId,
    };
  
    const token = getToken();
  
    fetch('http://localhost:8000/api/student/student_forum/student_question/student_detailquestion/', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`,
      },
      body: JSON.stringify(voteData),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          // C·∫≠p nh·∫≠t l·∫°i vote sau khi ƒë√£ g·ª≠i th√†nh c√¥ng
          if (type === "question") {
            setVotes(updatedVotes);
          } else if (type === "answer") {
            setVotes_ans(updatedVotes);
          }
        } else {
          console.error("Vote failed:", data);
        }
      })
      .catch((error) => console.error("Error during vote:", error));
  };
  

  return (
    <StudentForumLayout>
      <div style={containerStyle}>
        {/* Chi ti·∫øt c√¢u h·ªèi */}
        <div style={questionContainerStyle}>
          <div style={voteContainer}>
            <button
              style={voteButton}
              onClick={() => handleVote("question", "up")}
              disabled={userVoteQuestion === 1} // N·∫øu ƒë√£ vote l√™n, kh√¥ng th·ªÉ tƒÉng th√™m
            >
              ‚¨Ü
            </button>
            <span style={voteCount}>{votes}</span>
            <button
              style={voteButton}
              onClick={() => handleVote("question", "down")}
              disabled={userVoteQuestion === -1} // N·∫øu ƒë√£ vote xu·ªëng, kh√¥ng th·ªÉ gi·∫£m th√™m
            >
              ‚¨á
            </button>
          </div>

          <div style={questionContentStyle}>
            <h2>{question.title}</h2>
            <div style={metaContainerStyle}>
              <span>üïí {new Date(question.created_at).toLocaleString()}</span>
              <span>
                üîñ{" "}
                {question.tags && question.tags.length > 0
                  ? question.tags.join(", ")
                  : "No tags"}
              </span>
            </div>
            <p>{question.content}</p>
          </div>
        </div>

        {/* Khung c√¢u tr·∫£ l·ªùi */}
        <div style={answerContainer}>
          <label style={answerCountLabel}>T·ªïng s·ªë c√¢u tr·∫£ l·ªùi: {answers.length}</label>
          {answers.length > 0 ? (
            <ul>
              {answers.map((ans) => (
                <li key={ans.id} style={answerItemStyle}>
                  <div style={voteContainer}>
                    <button
                      style={voteButton}
                      onClick={() => handleVote("answer", "up")}
                      disabled={userVoteAnswer === 1} // N·∫øu ƒë√£ vote l√™n cho c√¢u tr·∫£ l·ªùi, kh√¥ng cho ph√©p tƒÉng th√™m
                    >
                      ‚¨Ü
                    </button>
                    <span style={voteCount}>{votes_ans}</span>
                    <button
                      style={voteButton}
                      onClick={() => handleVote("answer", "down")}
                      disabled={userVoteAnswer === -1} // N·∫øu ƒë√£ vote xu·ªëng cho c√¢u tr·∫£ l·ªùi, kh√¥ng cho ph√©p gi·∫£m th√™m
                    >
                      ‚¨á
                    </button>
                  </div>
                  <div style={answerContentStyle}>
                    <p>{ans.content}</p>
                    <span>üïí {new Date(ans.created_at).toLocaleString()}</span>
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p> </p>
          )}
        </div>
      </div>
    </StudentForumLayout>
  );
}


const containerStyle = {
  backgroundColor: "#f8f9fa",
  padding: "15px",
  borderRadius: "8px",
  border: "1px solid #ddd",
  marginBottom: "30px",
  marginTop: "15px",
  marginLeft: "160px",
  width: "1020px",
};

const questionContainerStyle = {
  backgroundColor: "#ffffff",
  padding: "20px",
  borderRadius: "8px",
  border: "1px solid #ddd",
  marginBottom: "20px",
  display: "flex",
  alignItems: "center",
};

const voteContainer = {
  display: "flex",
  flexDirection: "column",
  alignItems: "center",
  marginRight: "20px",
};

const voteButton = {
  fontSize: "40px",
  cursor: "pointer",
  border: "none",
  background: "none",
  color: "#003366",
};

const voteCount = {
  fontSize: "16px",
  fontWeight: "bold",
  color: "#003366",
};

const questionContentStyle = {
  flex: 1,
  fontSize: "16px",
  color: "#003366",
};

const answerContainer = {
  backgroundColor: "#ffffff",
  padding: "20px 40px 30px 0px",
  borderRadius: "8px",
  border: "1px solid #ddd",
};

const metaContainerStyle = {
  display: "flex",
  justifyContent: "flex-begin",
  fontSize: "16px", // Gi·∫£m font size
  marginBottom: "10px",
  gap: "15px",
};

const answerCountLabel = { fontSize: "16px", fontWeight: "bold", marginBottom: "15px", color: "#003366", marginLeft: "40px" };
const answerItemStyle = { display: "flex", marginBottom: "15px", padding: "10px", border: "1px solid #ddd", borderRadius: "8px" };
const answerContentStyle = { flex: 1 };

export default StudentForumQuestionDetail;
