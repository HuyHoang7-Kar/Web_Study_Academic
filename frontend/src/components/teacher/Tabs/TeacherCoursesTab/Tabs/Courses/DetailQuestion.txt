import React, { useEffect, useState, useRef } from "react";
import { useParams } from "react-router-dom";
import TeacherCoursesLayout from "../../Layout";
import { getToken } from "../../../../../auth/authHelper";
import {
  FaBookOpen,
  FaFire,
  FaUserTie,
  FaUsers,
  FaClock,
  FaMoneyBillWave,
  FaPlayCircle,
} from "react-icons/fa";
import axios from "axios";
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  List,
  ListItem,
  ListItemButton,
  ListItemText,
  Divider,
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const BASE_URL = "http://localhost:8000";

const TeacherDetailCourses = () => {
  const { courseId } = useParams();
  const [course, setCourse] = useState(null);
  const [latestCourses, setLatestCourses] = useState([]);
  const [hotCourses, setHotCourses] = useState([]);
  const [videoURL, setVideoURL] = useState("");
  const [currentTime, setCurrentTime] = useState(0);
  const videoRef = useRef(null);

  useEffect(() => {
    const fetchCourse = async () => {
      try {
        const res = await axios.get(
          `${BASE_URL}/api/teacher/teacher_courses/teacher_detailcourses/${courseId}/`
        );
        setCourse(res.data);
        setVideoURL(`${BASE_URL}${res.data.intro_video}`);
      } catch (error) {
        console.error("Lỗi khi tải dữ liệu khóa học:", error);
      }
    };
    fetchCourse();
  }, [courseId]);

  useEffect(() => {
    const fetchLatestCourses = async () => {
      try {
        const token = getToken();
        const response = await fetch(
          `${BASE_URL}/api/teacher/teacher_courses/teacher_lastestcourses/`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );
        const data = await response.json();
        setLatestCourses(data);
      } catch (error) {
        console.error("Lỗi khi tải khóa học mới nhất:", error);
      }
    };
    fetchLatestCourses();
  }, []);

  useEffect(() => {
    axios
      .get(`${BASE_URL}/api/teacher/teacher_courses/teacher_bestcourses/`)
      .then((response) => setHotCourses(response.data))
      .catch((error) =>
        console.error("Lỗi khi tải khóa học nổi bật:", error)
      );
  }, []);

  useEffect(() => {
    if (videoRef.current) {
      videoRef.current.currentTime = currentTime;
    }
  }, [currentTime]);

  const handleVideoPlay = (e) => {
    const video = e.target;
    video.play();
  };

  const handleSeek = (e) => {
    const video = e.target;
    setCurrentTime(video.currentTime);
  };

  const handleLessonClick = (lesson) => {
    if (lesson.video) {
      setVideoURL(`${BASE_URL}${lesson.video}`);
    } else {
      alert("Bài học này chưa có video.");
    }
  };

  if (!course) return <div>Đang tải...</div>;

  return (
    <TeacherCoursesLayout>
      <div style={styles.pageLayout}>
        {/* MAIN CONTAINER */}
        <div style={styles.containerStyle}>
          <div style={styles.headerWithButton}>
            <h2 style={{ textTransform: "uppercase" }}>{course.title}</h2>
          </div>
          <p style={{ fontSize: "18px", marginBottom: "20px" }}>
            {course.intro}
          </p>
          <div style={styles.courseContentWrapper}>
            {/* LEFT: Video */}
            <div style={styles.videoWrapper}>
              {videoURL ? (
                <video
                  ref={videoRef}
                  controls
                  style={styles.videoStyle}
                  onPlay={handleVideoPlay}
                  onSeeked={handleSeek}
                >
                  <source src={videoURL} type="video/mp4" />
                  Trình duyệt không hỗ trợ video.
                </video>
              ) : (
                <p>Không có video giới thiệu.</p>
              )}
            </div>

            {/* RIGHT: Course Info */}
            <div style={styles.courseInfo}>
              <div style={styles.additionalInfoWrapper}>
                <div style={styles.additionalInfoItem}>
                  <FaMoneyBillWave style={styles.iconStyle} />
                  <span style={{ fontSize: "18px", fontWeight: "bold" }}>
                    Phí:{" "}
                  </span>
                  <span style={{ fontSize: "18px", marginLeft: "10px" }}>
                    ${course.fee}
                  </span>
                </div>

                <div style={styles.additionalInfoItem}>
                  <FaClock style={styles.iconStyle} />
                  <span style={{ fontSize: "18px", fontWeight: "bold" }}>
                    Thời gian học:{" "}
                  </span>
                  <span style={{ fontSize: "18px", marginLeft: "10px" }}>
                    {course.total_duration}
                  </span>
                </div>

                <div style={styles.additionalInfoItem}>
                  <FaUserTie style={styles.iconStyle} />
                  <span style={{ fontSize: "18px", fontWeight: "bold" }}>
                    Giáo viên:{" "}
                  </span>
                  <span style={{ fontSize: "18px", marginLeft: "10px" }}>
                    {course.teacher}
                  </span>
                </div>

                <div style={styles.additionalInfoItem}>
                  <FaUsers style={styles.iconStyle} />
                  <span style={{ fontSize: "18px", fontWeight: "bold" }}>
                    Số học viên:{" "}
                  </span>
                  <span style={{ fontSize: "18px", marginLeft: "10px" }}>
                    {course.student_count}
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* COURSE CONTENT */}
          <div style={styles.containerContent}>
            <h3 style={{ marginBottom: "16px" }}>Nội dung khóa học</h3>
            {course.chapters && course.chapters.length > 0 ? (
              course.chapters.map((chapter, index) => (
                <Accordion key={chapter.id}>
                  <AccordionSummary
                    expandIcon={<ExpandMoreIcon />}
                    aria-controls={`panel${index}-content`}
                    id={`panel${index}-header`}
                  >
                    <Typography variant="h6">{chapter.title}</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    {chapter.lessons && chapter.lessons.length > 0 ? (
                      <List>
                        {chapter.lessons.map((lesson) => (
                          <div key={lesson.id}>
                            <ListItem disablePadding>
                              <ListItemButton
                                onClick={() => handleLessonClick(lesson)}
                              >
                                <FaPlayCircle
                                  style={{
                                    marginRight: "10px",
                                    color: "#1976d2",
                                  }}
                                />
                                <ListItemText primary={lesson.title} />
                              </ListItemButton>
                            </ListItem>
                            <Divider />
                          </div>
                        ))}
                      </List>
                    ) : (
                      <Typography variant="body2">
                        Chưa có bài học nào trong chương này.
                      </Typography>
                    )}
                  </AccordionDetails>
                </Accordion>
              ))
            ) : (
              <Typography variant="body1">
                Khóa học chưa có chương nào.
              </Typography>
            )}
          </div>
        </div>

        {/* SIDEBAR */}
        <div style={styles.sidebarWrapper}>
          <div style={styles.sidebarBox}>
            <h3 style={styles.sidebarTitle}>
              <FaBookOpen style={styles.iconStyle} /> Khóa học mới nhất
            </h3>
            <ul>
              {latestCourses.map((course) => (
                <li key={course.id}>{course.title}</li>
              ))}
            </ul>
          </div>
          <div style={styles.sidebarBox}>
            <h3 style={styles.sidebarTitle}>
              <FaFire style={styles.iconStyle} /> Khóa học nổi bật
            </h3>
            <ul>
              {hotCourses.map((course) => (
                <li key={course.id}>{course.title}</li>
              ))}
            </ul>
          </div>
        </div>
      </div>
    </TeacherCoursesLayout>
  );
};

export default TeacherDetailCourses;

const styles = {
  pageLayout: {
    display: "flex",
    flexDirection: "row",
    padding: "20px",
    gap: "20px",
  },
  containerStyle: {
    flex: 3,
    display: "flex",
    flexDirection: "column",
  },
  headerWithButton: {
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
  },
  courseContentWrapper: {
    display: "flex",
    flexDirection: "row",
    gap: "20px",
    marginTop: "20px",
  },
  videoWrapper: {
    flex: 2,
  },
  videoStyle: {
    width: "100%",
    height: "auto",
  },
  courseInfo: {
    flex: 1,
    display: "flex",
    flexDirection: "column",
    gap: "10px",
  },
  additionalInfoWrapper: {
    display: "flex",
    flexDirection: "column",
    gap: "10px",
  },
  additionalInfoItem: {
    display: "flex",
    alignItems: "center",
  },
  iconStyle: {
    marginRight: "10px",
  },
  containerContent: {
    marginTop: "40px",
  },
  sidebarWrapper: {
    flex: 1,
    display: "flex",
    flexDirection: "column",
    gap: "20px",
  },
  sidebarBox: {
    backgroundColor: "#f5f5f5",
    padding
::contentReference[oaicite:11]{index=11}
     alignItems: "center",
    marginBottom: "16px",
  },
  courseContentWrapper: {
    display: "flex",
    flexDirection: "row",
    gap: "20px",
    marginBottom: "30px",
  },
  videoWrapper: {
    flex: 2,
  },
  videoStyle: {
    width: "100%",
    maxHeight: "400px",
    borderRadius: "10px",
    boxShadow: "0 4px 8px rgba(0,0,0,0.1)",
  },
  courseInfo: {
    flex: 1,
    backgroundColor: "#f9f9f9",
    padding: "20px",
    borderRadius: "10px",
    boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
  },
  additionalInfoWrapper: {
    display: "flex",
    flexDirection: "column",
    gap: "12px",
  },
  additionalInfoItem: {
    display: "flex",
    alignItems: "center",
  },
  iconStyle: {
    marginRight: "10px",
    color: "#1976d2",
  },
  containerContent: {
    backgroundColor: "#fff",
    padding: "20px",
    borderRadius: "10px",
    boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
  },
  sidebarWrapper: {
    flex: 1,
    display: "flex",
    flexDirection: "column",
    gap: "20px",
  },
  sidebarBox: {
    backgroundColor: "#f5f5f5",
    padding: "16px",
    borderRadius: "10px",
    boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
  },
  sidebarTitle: {
    display: "flex",
    alignItems: "center",
    gap: "8px",
    marginBottom: "10px",
    fontSize: "18px",
  },
};
